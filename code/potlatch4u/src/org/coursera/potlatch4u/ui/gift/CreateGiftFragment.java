

package org.coursera.potlatch4u.ui.gift;

import static android.widget.Toast.LENGTH_LONG;
import static org.coursera.potlatch4u.ui.gift.GiftListActivity.LOG_TAG;

import org.coursera.potlatch4u.R;
import org.coursera.potlatch4u.orm.FormerResolver;
import org.coursera.potlatch4u.orm.GiftData;
import org.coursera.potlatch4u.user.UserData;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.os.RemoteException;
import android.text.Editable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

/**
 * Fragments require a Container Activity, this is the one for the Edit
 * GiftData
 */
public class CreateGiftFragment extends BaseGiftFragment {

	// EditText(s) used

	EditText titleET;
	EditText bodyET;
    ImageView giftPhotoView;
	Button imageCaptureButton;
	Button locationButton;

	TextView imageLocation;

	Button buttonCreate;
	Button buttonClear;
	Button buttonCancel;

	Uri imagePath;
	Uri fileUri;
	String imageName;

	// int index;
	OnOpenWindowInterface mOpener;
	FormerResolver resolver;

	public static CreateGiftFragment newInstance() {
		CreateGiftFragment f = new CreateGiftFragment();
		return f;
	}

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		try {
			mOpener = (OnOpenWindowInterface) activity;
			resolver = new FormerResolver(activity);
		} catch (ClassCastException e) {
			throw new ClassCastException(activity.toString()
					+ " must implement OnOpenWindowListener");
		}
	}

	@Override
	public void onDetach() {
		mOpener = null;
		resolver = null;
        imageName = null;
		super.onDetach();
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		// Get the EditTexts
		titleET = (EditText) getView().findViewById(
				R.id.gift_create_value_title);
		bodyET = (EditText) getView()
				.findViewById(R.id.gift_create_value_description);
		imageCaptureButton = (Button) getView().findViewById(
				R.id.gift_create_value_image_button);

		imageLocation = (TextView) getView().findViewById(
				R.id.gift_create_value_image_location);
        giftPhotoView = (ImageView) getView().findViewById(R.id.gift_photo_view);

		buttonClear = (Button) getView().findViewById(
				R.id.gift_create_button_reset);
		buttonCancel = (Button) getView().findViewById(
				R.id.gift_create_button_cancel);
		buttonCreate = (Button) getView().findViewById(
				R.id.gift_create_button_save);

		buttonClear.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				titleET.setText("" + "");
				bodyET.setText("" + "");
				imageLocation.setText("" + "");
			}
		});

		buttonCancel.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (getResources().getBoolean(R.bool.isTablet) == true) {
					// put
					mOpener.openViewGiftFragment(0);
				} else {
					getActivity().finish(); // same as hitting 'back' button
				}
			}
		});
		buttonCreate.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {


				// local Editables
				Editable titleCreateable = titleET.getText();
				Editable bodyCreateable = bodyET.getText();
				
				// For future expansion: The loginId and giftId need to be generated by the system
				long loginId = 0;
				long giftId = 0;
                long touchedCount = 0;
				String title = "";
				String description = "";
				String imageUri = "";

				// pull values from Editables
				title = String.valueOf(titleCreateable.toString());
				description = String.valueOf(bodyCreateable.toString());
				imageName = createGiftImageName();
				if (imagePathFinal != null)
					imageUri = imagePathFinal.toString();

                // new GiftData object with above info
				GiftData newData = new GiftData(
						-1,
						// -1 row index, because there is no way to know which
						// row it will go into
                        loginId, giftId, title, description, imageUri, touchedCount);
                Log.d(CreateGiftFragment.class.getCanonicalName(), "imageName" + imageName);

				Log.d(CreateGiftFragment.class.getCanonicalName(),
						"newGiftData:" + newData);

				// insert it through Resolver to be put into ContentProvider
				try {
					resolver.addGift(newData);
				} catch (RemoteException e) {
					Log.e(LOG_TAG,
							"Caught RemoteException => " + e.getMessage());
					e.printStackTrace();
				}
				// return back to proper state
				if (getResources().getBoolean(R.bool.isTablet) == true) {
					// put
					mOpener.openViewGiftFragment(0);
				} else {
					getActivity().finish(); // same as hitting 'back' button
				}
			}
		});

	}

	private String createGiftImageName() {
        if (imageName == null) {
            imageName = "gift-" + UserData.getUserName() + "-" + System.currentTimeMillis();
		}
		return imageName;
	}

	Uri imagePathFinal = null;

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		Log.d(LOG_TAG, "CreateFragment onActivtyResult called. requestCode: "
				+ requestCode + " resultCode:" + resultCode + "data:" + data);
		if (requestCode == CreateGiftActivity.CAMERA_PIC_REQUEST) {
			if (resultCode == CreateGiftActivity.RESULT_OK) {
				Log.d(LOG_TAG, "Image Capture Result OK! " + imagePath);
				// Image captured and saved to fileUri specified in the Intent
				imagePathFinal = imagePath;
				imageLocation.setText(imagePathFinal.toString());
                showImage(imagePath.toString());
			} else if (resultCode == CreateGiftActivity.RESULT_CANCELED) {
				// User cancelled the image capture
			} else {
				// Image capture failed, advise user
				Toast.makeText(getActivity(),
						"Taking picture failed for " + imagePath, LENGTH_LONG)
						.show();
			}
		}
	}

    private void showImage(String imageMetaDataPath) {
        Uri imageUri = Uri.parse(imageMetaDataPath);
        // TDO - Set the URI of the ImageView to the image path stored in
        // the string
        // imageMetaDataPath, using the setImageURI function from the ImageView
        Log.d(LOG_TAG, "Loading image from " + imageUri);
        giftPhotoView.setImageURI(imageUri);
    }

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.gift_creation_fragment,
				container, false);
		container.setBackgroundColor(Color.GRAY);
		return view;
	}

}
